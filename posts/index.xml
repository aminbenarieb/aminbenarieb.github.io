<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Amin Benarieb&#39;s Blog</title>
    <link>https://amin.benarieb.com/posts/</link>
    <description>Recent content in Posts on Amin Benarieb&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2024, Amin Benarieb</copyright>
    <lastBuildDate>Sun, 05 Jan 2025 18:57:18 +0500</lastBuildDate><atom:link href="https://amin.benarieb.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dealing with Floating-Point Precision in Swift</title>
      <link>https://amin.benarieb.com/posts/floating-precision/</link>
      <pubDate>Sun, 05 Jan 2025 18:57:18 +0500</pubDate>
      
      <guid>https://amin.benarieb.com/posts/floating-precision/</guid>
      <description>During my junior years at university, we had a course dedicated to data structures and algorithms. One of the first tasks was working with large numbers, particularly floating-point numbers. At the time, I completed the task successfully. However, I eventually forgot the key lesson about the pitfalls of floating-point numbers and their rounding errors.
Take a look at the following Swift code:
let a = 12.31 let b = 8.2 print(a + b) // Output: 20.</description>
    </item>
    
    <item>
      <title>How to Debug Faster With Processinfo</title>
      <link>https://amin.benarieb.com/posts/how-to-debug-faster-with-processinfo/</link>
      <pubDate>Wed, 30 Oct 2024 16:19:20 +0500</pubDate>
      
      <guid>https://amin.benarieb.com/posts/how-to-debug-faster-with-processinfo/</guid>
      <description>How to Debug Faster Without Rebuilding Your iOS App Problem Building an iOS app can be time-consuming, especially for large projects with complex dependencies. Waiting for the app to rebuild every time you make a minor change or need to test with different data can significantly slow down your development process.
Solution To speed up debugging without rebuilding your app, you can leverage ProcessInfo.processInfo.environment and ProcessInfo.processInfo.arguments. These allow you to inject data and control app behavior at runtime, making it easier to test different scenarios quickly.</description>
    </item>
    
    <item>
      <title>How to debug iOS deeplinks with local server</title>
      <link>https://amin.benarieb.com/posts/how-to-debug-ios-deeplinks-with-local-server/</link>
      <pubDate>Thu, 29 Jun 2023 14:27:48 +0100</pubDate>
      
      <guid>https://amin.benarieb.com/posts/how-to-debug-ios-deeplinks-with-local-server/</guid>
      <description>How to Debug iOS Deep Links with a Local Server Problem Testing interactions within your iOS app that require a custom web page—such as engaging with payment options in a pop-up browser via universal links or deep links—can be challenging. Capturing and modifying URLs, handling deep links that close pop-up browsers, and ensuring that various types of links work seamlessly within your app can be time-consuming without the right tools.</description>
    </item>
    
  </channel>
</rss>
