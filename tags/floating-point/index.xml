<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>floating-point on Amin Benarieb&#39;s Blog</title>
    <link>https://amin.benarieb.com/tags/floating-point/</link>
    <description>Recent content in floating-point on Amin Benarieb&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2024, Amin Benarieb</copyright>
    <lastBuildDate>Sun, 05 Jan 2025 18:57:18 +0500</lastBuildDate><atom:link href="https://amin.benarieb.com/tags/floating-point/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dealing with Floating-Point Precision in Swift</title>
      <link>https://amin.benarieb.com/posts/floating-precision/</link>
      <pubDate>Sun, 05 Jan 2025 18:57:18 +0500</pubDate>
      
      <guid>https://amin.benarieb.com/posts/floating-precision/</guid>
      <description>During my junior years at university, we had a course dedicated to data structures and algorithms. One of the first tasks was working with large numbers, particularly floating-point numbers. At the time, I completed the task successfully. However, I eventually forgot the key lesson about the pitfalls of floating-point numbers and their rounding errors.
Take a look at the following Swift code:
let a = 12.31 let b = 8.2 print(a + b) // Output: 20.</description>
    </item>
    
  </channel>
</rss>
